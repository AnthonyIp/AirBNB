security:
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        in_database:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        #metter admin avant le main car lecture séquentielle
        admin:
            pattern: ˆ/admin
            anonymous: true
            lazy: true
            provider: in_database

            form_login:
                login_path: admin_account_login
                check_path: admin_account_login
                default_target_path: admin_ads_index
            logout:
                path: admin_account_logout
                target: homepage
        main:
            anonymous: true
            lazy: true
            provider: in_database
            
            form_login:
                login_path: account_login
                check_path: account_login
                csrf_token_generator: security.csrf.token_manager
            logout:
                path: account_logout
                target: account_login


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Cette ligne permet de laisser un accès à admin.login même si non connecté
        - { path: ^/admin/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Tout ce qui commence par admin demande à ce que le user soit identifié ET admin
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
